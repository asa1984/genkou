/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as ProtectedImport } from './routes/_protected'

// Create Virtual Routes

const ProtectedIndexLazyImport = createFileRoute('/_protected/')()
const PublicLoginIndexLazyImport = createFileRoute('/_public/login/')()
const ProtectedSettingsIndexLazyImport = createFileRoute(
  '/_protected/settings/',
)()
const ProtectedScriptsScriptIdIndexLazyImport = createFileRoute(
  '/_protected/scripts/$scriptId/',
)()
const ProtectedScriptsScriptIdEditorIndexLazyImport = createFileRoute(
  '/_protected/scripts/$scriptId/editor/',
)()

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedIndexLazyRoute = ProtectedIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/index.lazy').then((d) => d.Route),
)

const PublicLoginIndexLazyRoute = PublicLoginIndexLazyImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => PublicRoute,
} as any).lazy(() =>
  import('./routes/_public/login/index.lazy').then((d) => d.Route),
)

const ProtectedSettingsIndexLazyRoute = ProtectedSettingsIndexLazyImport.update(
  {
    id: '/settings/',
    path: '/settings/',
    getParentRoute: () => ProtectedRoute,
  } as any,
).lazy(() =>
  import('./routes/_protected/settings/index.lazy').then((d) => d.Route),
)

const ProtectedScriptsScriptIdIndexLazyRoute =
  ProtectedScriptsScriptIdIndexLazyImport.update({
    id: '/scripts/$scriptId/',
    path: '/scripts/$scriptId/',
    getParentRoute: () => ProtectedRoute,
  } as any).lazy(() =>
    import('./routes/_protected/scripts/$scriptId/index.lazy').then(
      (d) => d.Route,
    ),
  )

const ProtectedScriptsScriptIdEditorIndexLazyRoute =
  ProtectedScriptsScriptIdEditorIndexLazyImport.update({
    id: '/scripts/$scriptId/editor/',
    path: '/scripts/$scriptId/editor/',
    getParentRoute: () => ProtectedRoute,
  } as any).lazy(() =>
    import('./routes/_protected/scripts/$scriptId/editor/index.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/settings/': {
      id: '/_protected/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof ProtectedSettingsIndexLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_public/login/': {
      id: '/_public/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginIndexLazyImport
      parentRoute: typeof PublicImport
    }
    '/_protected/scripts/$scriptId/': {
      id: '/_protected/scripts/$scriptId/'
      path: '/scripts/$scriptId'
      fullPath: '/scripts/$scriptId'
      preLoaderRoute: typeof ProtectedScriptsScriptIdIndexLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/scripts/$scriptId/editor/': {
      id: '/_protected/scripts/$scriptId/editor/'
      path: '/scripts/$scriptId/editor'
      fullPath: '/scripts/$scriptId/editor'
      preLoaderRoute: typeof ProtectedScriptsScriptIdEditorIndexLazyImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedIndexLazyRoute: typeof ProtectedIndexLazyRoute
  ProtectedSettingsIndexLazyRoute: typeof ProtectedSettingsIndexLazyRoute
  ProtectedScriptsScriptIdIndexLazyRoute: typeof ProtectedScriptsScriptIdIndexLazyRoute
  ProtectedScriptsScriptIdEditorIndexLazyRoute: typeof ProtectedScriptsScriptIdEditorIndexLazyRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedIndexLazyRoute: ProtectedIndexLazyRoute,
  ProtectedSettingsIndexLazyRoute: ProtectedSettingsIndexLazyRoute,
  ProtectedScriptsScriptIdIndexLazyRoute:
    ProtectedScriptsScriptIdIndexLazyRoute,
  ProtectedScriptsScriptIdEditorIndexLazyRoute:
    ProtectedScriptsScriptIdEditorIndexLazyRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

interface PublicRouteChildren {
  PublicLoginIndexLazyRoute: typeof PublicLoginIndexLazyRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicLoginIndexLazyRoute: PublicLoginIndexLazyRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PublicRouteWithChildren
  '/': typeof ProtectedIndexLazyRoute
  '/settings': typeof ProtectedSettingsIndexLazyRoute
  '/login': typeof PublicLoginIndexLazyRoute
  '/scripts/$scriptId': typeof ProtectedScriptsScriptIdIndexLazyRoute
  '/scripts/$scriptId/editor': typeof ProtectedScriptsScriptIdEditorIndexLazyRoute
}

export interface FileRoutesByTo {
  '': typeof PublicRouteWithChildren
  '/': typeof ProtectedIndexLazyRoute
  '/settings': typeof ProtectedSettingsIndexLazyRoute
  '/login': typeof PublicLoginIndexLazyRoute
  '/scripts/$scriptId': typeof ProtectedScriptsScriptIdIndexLazyRoute
  '/scripts/$scriptId/editor': typeof ProtectedScriptsScriptIdEditorIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_protected/': typeof ProtectedIndexLazyRoute
  '/_protected/settings/': typeof ProtectedSettingsIndexLazyRoute
  '/_public/login/': typeof PublicLoginIndexLazyRoute
  '/_protected/scripts/$scriptId/': typeof ProtectedScriptsScriptIdIndexLazyRoute
  '/_protected/scripts/$scriptId/editor/': typeof ProtectedScriptsScriptIdEditorIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/'
    | '/settings'
    | '/login'
    | '/scripts/$scriptId'
    | '/scripts/$scriptId/editor'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/'
    | '/settings'
    | '/login'
    | '/scripts/$scriptId'
    | '/scripts/$scriptId/editor'
  id:
    | '__root__'
    | '/_protected'
    | '/_public'
    | '/_protected/'
    | '/_protected/settings/'
    | '/_public/login/'
    | '/_protected/scripts/$scriptId/'
    | '/_protected/scripts/$scriptId/editor/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_protected",
        "/_public"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/",
        "/_protected/settings/",
        "/_protected/scripts/$scriptId/",
        "/_protected/scripts/$scriptId/editor/"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/login/"
      ]
    },
    "/_protected/": {
      "filePath": "_protected/index.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/settings/": {
      "filePath": "_protected/settings/index.lazy.tsx",
      "parent": "/_protected"
    },
    "/_public/login/": {
      "filePath": "_public/login/index.lazy.tsx",
      "parent": "/_public"
    },
    "/_protected/scripts/$scriptId/": {
      "filePath": "_protected/scripts/$scriptId/index.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/scripts/$scriptId/editor/": {
      "filePath": "_protected/scripts/$scriptId/editor/index.lazy.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
