/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  HTTPValidationError,
  ReadScriptsScriptsGetParams,
  ScriptCreate,
  ScriptPublic,
  ScriptUpdate,
  TimerCreate,
  TimerPublic,
  TimerUpdate
} from '../model'



/**
 * @summary Create Script
 */
export type createScriptScriptsPostResponse = {
  data: ScriptPublic;
  status: number;
}

export const getCreateScriptScriptsPostUrl = () => {


  return `/scripts/`
}

export const createScriptScriptsPost = async (scriptCreate: ScriptCreate, options?: RequestInit): Promise<createScriptScriptsPostResponse> => {
  
  const res = await fetch(getCreateScriptScriptsPostUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      scriptCreate,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getCreateScriptScriptsPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createScriptScriptsPost>>, TError,{data: ScriptCreate}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof createScriptScriptsPost>>, TError,{data: ScriptCreate}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createScriptScriptsPost>>, {data: ScriptCreate}> = (props) => {
          const {data} = props ?? {};

          return  createScriptScriptsPost(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateScriptScriptsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createScriptScriptsPost>>>
    export type CreateScriptScriptsPostMutationBody = ScriptCreate
    export type CreateScriptScriptsPostMutationError = HTTPValidationError

    /**
 * @summary Create Script
 */
export const useCreateScriptScriptsPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createScriptScriptsPost>>, TError,{data: ScriptCreate}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof createScriptScriptsPost>>,
        TError,
        {data: ScriptCreate},
        TContext
      > => {

      const mutationOptions = getCreateScriptScriptsPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Read Scripts
 */
export type readScriptsScriptsGetResponse = {
  data: ScriptPublic[];
  status: number;
}

export const getReadScriptsScriptsGetUrl = (params?: ReadScriptsScriptsGetParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `/scripts/?${normalizedParams.toString()}` : `/scripts/`
}

export const readScriptsScriptsGet = async (params?: ReadScriptsScriptsGetParams, options?: RequestInit): Promise<readScriptsScriptsGetResponse> => {
  
  const res = await fetch(getReadScriptsScriptsGetUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}



export const getReadScriptsScriptsGetQueryKey = (params?: ReadScriptsScriptsGetParams,) => {
    return [`/scripts/`, ...(params ? [params]: [])] as const;
    }

    
export const getReadScriptsScriptsGetQueryOptions = <TData = Awaited<ReturnType<typeof readScriptsScriptsGet>>, TError = HTTPValidationError>(params?: ReadScriptsScriptsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readScriptsScriptsGet>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadScriptsScriptsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readScriptsScriptsGet>>> = ({ signal }) => readScriptsScriptsGet(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readScriptsScriptsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type ReadScriptsScriptsGetQueryResult = NonNullable<Awaited<ReturnType<typeof readScriptsScriptsGet>>>
export type ReadScriptsScriptsGetQueryError = HTTPValidationError


export function useReadScriptsScriptsGet<TData = Awaited<ReturnType<typeof readScriptsScriptsGet>>, TError = HTTPValidationError>(
 params: undefined |  ReadScriptsScriptsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readScriptsScriptsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readScriptsScriptsGet>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useReadScriptsScriptsGet<TData = Awaited<ReturnType<typeof readScriptsScriptsGet>>, TError = HTTPValidationError>(
 params?: ReadScriptsScriptsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readScriptsScriptsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readScriptsScriptsGet>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useReadScriptsScriptsGet<TData = Awaited<ReturnType<typeof readScriptsScriptsGet>>, TError = HTTPValidationError>(
 params?: ReadScriptsScriptsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readScriptsScriptsGet>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Read Scripts
 */

export function useReadScriptsScriptsGet<TData = Awaited<ReturnType<typeof readScriptsScriptsGet>>, TError = HTTPValidationError>(
 params?: ReadScriptsScriptsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readScriptsScriptsGet>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getReadScriptsScriptsGetQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update Script
 */
export type updateScriptScriptsScriptIdPutResponse = {
  data: ScriptPublic;
  status: number;
}

export const getUpdateScriptScriptsScriptIdPutUrl = (scriptId: string,) => {


  return `/scripts/${scriptId}`
}

export const updateScriptScriptsScriptIdPut = async (scriptId: string,
    scriptUpdate: ScriptUpdate, options?: RequestInit): Promise<updateScriptScriptsScriptIdPutResponse> => {
  
  const res = await fetch(getUpdateScriptScriptsScriptIdPutUrl(scriptId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      scriptUpdate,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getUpdateScriptScriptsScriptIdPutMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateScriptScriptsScriptIdPut>>, TError,{scriptId: string;data: ScriptUpdate}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof updateScriptScriptsScriptIdPut>>, TError,{scriptId: string;data: ScriptUpdate}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateScriptScriptsScriptIdPut>>, {scriptId: string;data: ScriptUpdate}> = (props) => {
          const {scriptId,data} = props ?? {};

          return  updateScriptScriptsScriptIdPut(scriptId,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateScriptScriptsScriptIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateScriptScriptsScriptIdPut>>>
    export type UpdateScriptScriptsScriptIdPutMutationBody = ScriptUpdate
    export type UpdateScriptScriptsScriptIdPutMutationError = HTTPValidationError

    /**
 * @summary Update Script
 */
export const useUpdateScriptScriptsScriptIdPut = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateScriptScriptsScriptIdPut>>, TError,{scriptId: string;data: ScriptUpdate}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof updateScriptScriptsScriptIdPut>>,
        TError,
        {scriptId: string;data: ScriptUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateScriptScriptsScriptIdPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Create Timer
 */
export type createTimerTimersPostResponse = {
  data: TimerPublic;
  status: number;
}

export const getCreateTimerTimersPostUrl = () => {


  return `/timers/`
}

export const createTimerTimersPost = async (timerCreate: TimerCreate, options?: RequestInit): Promise<createTimerTimersPostResponse> => {
  
  const res = await fetch(getCreateTimerTimersPostUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      timerCreate,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getCreateTimerTimersPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTimerTimersPost>>, TError,{data: TimerCreate}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof createTimerTimersPost>>, TError,{data: TimerCreate}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTimerTimersPost>>, {data: TimerCreate}> = (props) => {
          const {data} = props ?? {};

          return  createTimerTimersPost(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateTimerTimersPostMutationResult = NonNullable<Awaited<ReturnType<typeof createTimerTimersPost>>>
    export type CreateTimerTimersPostMutationBody = TimerCreate
    export type CreateTimerTimersPostMutationError = HTTPValidationError

    /**
 * @summary Create Timer
 */
export const useCreateTimerTimersPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTimerTimersPost>>, TError,{data: TimerCreate}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof createTimerTimersPost>>,
        TError,
        {data: TimerCreate},
        TContext
      > => {

      const mutationOptions = getCreateTimerTimersPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Update Timer
 */
export type updateTimerTimersTimerIdPutResponse = {
  data: TimerPublic;
  status: number;
}

export const getUpdateTimerTimersTimerIdPutUrl = (timerId: string,) => {


  return `/timers/${timerId}`
}

export const updateTimerTimersTimerIdPut = async (timerId: string,
    timerUpdate: TimerUpdate, options?: RequestInit): Promise<updateTimerTimersTimerIdPutResponse> => {
  
  const res = await fetch(getUpdateTimerTimersTimerIdPutUrl(timerId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      timerUpdate,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getUpdateTimerTimersTimerIdPutMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTimerTimersTimerIdPut>>, TError,{timerId: string;data: TimerUpdate}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof updateTimerTimersTimerIdPut>>, TError,{timerId: string;data: TimerUpdate}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateTimerTimersTimerIdPut>>, {timerId: string;data: TimerUpdate}> = (props) => {
          const {timerId,data} = props ?? {};

          return  updateTimerTimersTimerIdPut(timerId,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateTimerTimersTimerIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateTimerTimersTimerIdPut>>>
    export type UpdateTimerTimersTimerIdPutMutationBody = TimerUpdate
    export type UpdateTimerTimersTimerIdPutMutationError = HTTPValidationError

    /**
 * @summary Update Timer
 */
export const useUpdateTimerTimersTimerIdPut = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTimerTimersTimerIdPut>>, TError,{timerId: string;data: TimerUpdate}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof updateTimerTimersTimerIdPut>>,
        TError,
        {timerId: string;data: TimerUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateTimerTimersTimerIdPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
